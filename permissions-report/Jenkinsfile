def cronExpr = env.BRANCH_IS_PRIMARY ? '@daily' : ''
def reportName = 'github-jenkinsci-permissions-report.json'

pipeline {
  triggers {
    cron(cronExpr)
  }
  options {
    // This pipeline takes 6-7 hours max to execute
    timeout(time: 10, unit: 'HOURS')
    lock(resource: "github-jenkinsci-permissions-report-${env.BRANCH_NAME}", inversePrecedence: true)
    buildDiscarder logRotator(daysToKeepStr: '90')
  }
  agent {
    label 'jnlp-linux-arm64'
  }
  stages {
    stage('Generate GitHub Permissions Report') {
      when {
        anyOf {
          changeset 'permissions-report/**/*'
          expression { env.BRANCH_IS_PRIMARY }
        }
      }
      environment {
        GITHUB_APP_PRIVATE_KEY_B64 = credentials('githubapp-jenkins-infra-reports-private-key-b64')
        GITHUB_APP_ID = credentials('githubapp-jenkins-infra-reports-app-identifier')
        GITHUB_ORG_NAME = "jenkinsci"
        REPORT_NAME = "${reportName}"
      }
      steps {
        dir('permissions-report') {
          sh 'bundle install'
          sh 'bundle exec ruby ./permissions-report.rb > "${REPORT_NAME}"'
          archiveArtifacts reportName
        }
      }
    }
    stage('Publish GitHub Permissions Report') {
      when {
        expression { env.BRANCH_IS_PRIMARY }
      }
      steps {
        dir('permissions-report') {
          publishReports ([reportName])
        }
      }
    }
  }
}
