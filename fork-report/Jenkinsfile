@Library('pipeline-library@pull/348/head') _

def cronExpr = env.BRANCH_IS_PRIMARY ? '@daily' : ''
def reportName = env.BRANCH_IS_PRIMARY ? 'github-jenkinsci-fork-report.json' : "github-jenkinsci-fork-report-${env.BRANCH_NAME}.json"

pipeline {
  triggers {
    cron(cronExpr)
  }
  options {
    // This pipeline takes 1-2 minutes max to execute
    timeout(time: 10, unit: 'MINUTES')
    lock(resource: 'infra-reports-github-forks', inversePrecedence: true)
  }
  agent {
    kubernetes {
      yamlFile 'JenkinsAgentPodTemplate.yaml'
    }
  }
  stages {
    stage('Generate GitHub Forks Report') {
      environment {
        // Requires 'jenkins-infra-reports' to be of type GithubAppCredentials so $GITHUB_AUTH_PSW holds an IAT (Github Installation Access Token) valid for 1 hour
        GITHUB_AUTH = credentials('jenkins-infra-reports')
        REPORT_NAME = "${reportName}"
      }
      steps {
        dir('fork-report') {
          sh 'bundle install'
          sh 'bundle exec ruby ./fork-report.rb> "${REPORT_NAME}"'
          archiveArtifacts reportName
        }
      }
    }
    stage('Publish GitHub Forks Report') {
      when {
        expression { env.BRANCH_IS_PRIMARY }
      }
      steps {
        dir('fork-report') {
          publishReports ([reportName])
        }
      }
    }
  }
}
