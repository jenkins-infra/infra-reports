def cronExpr = env.BRANCH_IS_PRIMARY ? '@hourly' : ''
def reportName = 'index.json'
def sourceHTML = 'source.html'
def version = 'v2'
def reportFolder = "infrastructure/${version}"

pipeline {
  triggers {
    cron(cronExpr)
  }
  options {
    // This pipeline takes 1-2 minutes max to execute
    timeout(time: 10, unit: 'MINUTES')
    lock(resource: 'jenkins-infra-data', inversePrecedence: true)
    buildDiscarder logRotator(daysToKeepStr: '90')
  }
  agent {
    label 'jnlp-linux-arm64'
  }
  stages {
    stage('Generate Jenkins Infrastructure Public Data report') {
      environment {
        VERSION = "${version}"
        REPORT_NAME = "${reportName}"
        SOURCE_HTML = "${sourceHTML}"
        REPORT_FOLDER = "${reportFolder}"
      }
      steps {
        dir('jenkins-infra-data') {
          sh '''
          set +x
          # Retrieve existing report if it exists, empty object otherwise
          existing=$(curl --silent --fail --max-redirs 2 --request GET --location "https://reports.jenkins.io/${REPORT_FOLDER}/${REPORT_NAME}" || echo '{}')
          echo "$existing" > "${REPORT_NAME}"

          # Update the report
          ./get-jenkins-io_mirrors.sh

          # Copy the report to the desired folder for getting an apppropriate report URL
          mkdir -p "${REPORT_FOLDER}"
          cp "${REPORT_NAME}" "${REPORT_FOLDER}"
          '''
          archiveArtifacts artifacts: "${sourceHTML}, ${reportName}"
        }
      }
    }
    stage('Publish Jenkins Infrastructure Public Data report') {
      when {
        expression { env.BRANCH_IS_PRIMARY }
      }
      steps {
        dir('jenkins-infra-data') {
          publishReports (["${reportFolder}/${reportName}"])
        }
      }
    }
  }
}
